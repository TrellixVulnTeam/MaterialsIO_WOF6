"""Utilities for working with parsers"""

from stevedore.extension import ExtensionManager
from stevedore.driver import DriverManager
from collections import namedtuple
from typing import Iterator

from materials_io.base import BaseParser

ParseResult = namedtuple('ParseResult', ['group', 'parser', 'metadata'])


def get_available_parsers():
    mgr = ExtensionManager(
        namespace='materialsio.parser',
    )

    # Get information about each parser
    output = {}
    for name, ext in mgr.items():
        plugin = ext.plugin()
        output[name] = {
            'description': plugin.__doc__.split("\n")[0],
            'version': plugin.version()
        }
    return output


def get_parser(name: str) -> BaseParser:
    """Load a parser object

    Args:
        name (str): Name of parser
    Returns:
        (BaseParser) Requested parser
    """
    # Load the parser
    mgr = DriverManager(
        namespace='materialsio.parser',
        name=name,
        invoke_on_load=True
    )

    # Execute it on the group
    return mgr.driver


def execute_parser(name, group, context=None):
    """Invoke a parser on a certain group of data

    Args:
        name (str): Name of the parser
        group ([str]): Paths to group of files to be parsed
        context (dict): Context of the files
    Returns:
        ([dict]): Metadata generated by the parser
    """
    return get_parser(name).parse(group, context)


def run_all_parsers(directory: str, context=None) -> Iterator[ParseResult]:
    """Run all known files on a directory of files

    Args:
        directory (str): Path to directory to be parsed
        context (dict): Context of the files
    Yields
        ((str), str, dict) Tuple of (1) group of files, (2) name of parser, (3) metadata
    """

    # Get the list of known parsers
    for name in get_available_parsers():
        parser = get_parser(name)
        for group, metadata in parser.parse_directory(directory, context):
            yield group, name, metadata
